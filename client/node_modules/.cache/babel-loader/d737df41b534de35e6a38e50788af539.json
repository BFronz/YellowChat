{"ast":null,"code":"import _defineProperty from \"/Users/robertfronczak/yellow-chat/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/robertfronczak/yellow-chat/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/robertfronczak/yellow-chat/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/robertfronczak/yellow-chat/client/src/pages/Reviews.js\";\nimport React, { useEffect, useState } from \"react\";\nimport APIReviews from \"../utils/APIReviews\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  var _this = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      reviews = _useState2[0],\n      setReviews = _useState2[1]; // update the initial state to provide values for\n  // the controls in the form (use empty strings)\n\n\n  var _useState3 = useState({\n    title: '',\n    author: '',\n    synopsis: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadReviews();\n  }, []); // Loads all books and sets them to books\n\n  function loadReviews() {\n    APIReviews.getReviews().then(function (res) {\n      return setReviews(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ;\n\n  function handleInputChange(event) {\n    // add code to control the components here\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n  }\n\n  function handleFormSubmit(event) {\n    // add code here to post a new book to the api\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      APIReviews.saveReview({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synosis\n      }).then(function () {\n        return setFormObject({\n          title: '',\n          author: '',\n          synopsis: ''\n        });\n      }).then(function () {\n        return loadReviews();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Write a review about a Vendor or anything!\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"author\",\n    placeholder: \"Business (required)\",\n    value: formObject.author,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Review (required)\",\n    value: formObject.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Submit Review\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Latest reviews:\"), reviews.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, reviews.map(function (review) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: review._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, review.author, \": \", review.title));\n  })) : /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, \"Be the first to write a review.\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/robertfronczak/yellow-chat/client/src/pages/Reviews.js"],"names":["React","useEffect","useState","APIReviews","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","reviews","setReviews","title","author","synopsis","formObject","setFormObject","loadReviews","getReviews","then","res","data","catch","err","console","log","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveReview","synosis","length","map","review","_id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,oBAA/B;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,oBAAzC;;AAGA,SAASC,KAAT,GAAiB;AAAA;;AAEf;AAFe,kBAGeV,QAAQ,CAAC,EAAD,CAHvB;AAAA;AAAA,MAGRW,OAHQ;AAAA,MAGCC,UAHD,kBAKf;AACA;;;AANe,mBAOqBZ,QAAQ,CAAC;AAAEa,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE,EAArB;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GAAD,CAP7B;AAAA;AAAA,MAORC,UAPQ;AAAA,MAOIC,aAPJ,kBASf;;;AACAlB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT,CAVe,CAcf;;AACA,WAASA,WAAT,GAAuB;AACrBjB,IAAAA,UAAU,CAACkB,UAAX,GACGC,IADH,CACQ,UAAAC,GAAG;AAAA,aACPT,UAAU,CAACS,GAAG,CAACC,IAAL,CADH;AAAA,KADX,EAIGC,KAJH,CAIS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAJZ;AAKD;;AAAA;;AAED,WAASG,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AADgC,wBAERA,KAAK,CAACC,MAFE;AAAA,QAExBC,IAFwB,iBAExBA,IAFwB;AAAA,QAElBC,KAFkB,iBAElBA,KAFkB;AAGhCd,IAAAA,aAAa,mBACRD,UADQ,sBACKc,IADL,EACYC,KADZ,GAAb;AAGD;;AAED,WAASC,gBAAT,CAA0BJ,KAA1B,EAAiC;AAC/B;AACAA,IAAAA,KAAK,CAACK,cAAN;;AACA,QAAIjB,UAAU,CAACH,KAAX,IAAoBG,UAAU,CAACF,MAAnC,EAA2C;AACzCb,MAAAA,UAAU,CAACiC,UAAX,CAAsB;AACpBrB,QAAAA,KAAK,EAAEG,UAAU,CAACH,KADE;AAEpBC,QAAAA,MAAM,EAAEE,UAAU,CAACF,MAFC;AAGpBC,QAAAA,QAAQ,EAAEC,UAAU,CAACmB;AAHD,OAAtB,EAMGf,IANH,CAMQ;AAAA,eACJH,aAAa,CAAC;AACZJ,UAAAA,KAAK,EAAE,EADK;AAEZC,UAAAA,MAAM,EAAE,EAFI;AAGZC,UAAAA,QAAQ,EAAE;AAHE,SAAD,CADT;AAAA,OANR,EAaGK,IAbH,CAaQ;AAAA,eACJF,WAAW,EADP;AAAA,OAbR,EAgBGK,KAhBH,CAgBS,UAACC,GAAD;AAAA,eACLC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CADK;AAAA,OAhBT;AAoBD;AAEF;;AAID,sBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAFJ,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,KAAD;AACE,IAAA,QAAQ,EAAEG,iBADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,WAAW,EAAC,qBAHd;AAIE,IAAA,KAAK,EAAEX,UAAU,CAACF,MAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAQE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEa,iBADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,mBAHd;AAIE,IAAA,KAAK,EAAEX,UAAU,CAACH,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAeE,oBAAC,OAAD;AACE,IAAA,QAAQ,EAAE,EAAEG,UAAU,CAACF,MAAX,IAAqBE,UAAU,CAACH,KAAlC,CADZ;AAEE,IAAA,OAAO,EAAEmB,gBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAfF,CAHF,CADF,eA2BE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,EAIGrB,OAAO,CAACyB,MAAR,gBACK,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCzB,OAAO,CAAC0B,GAAR,CAAY,UAAAC,MAAM,EAAI;AACnB,wBACI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,MAAM,CAACC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,MAAM,CAACxB,MADZ,QACsBwB,MAAM,CAACzB,KAD7B,CAFR,CADJ;AASH,GAVA,CADD,CADL,gBAeG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAnBN,CA3BF,CADF,CADF;AAsDD;;AAGD,eAAeH,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport APIReviews from \"../utils/APIReviews\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\n\nfunction Books() {\n\n  // Setting our component's initial state\n  const [reviews, setReviews] = useState([])\n\n  // update the initial state to provide values for\n  // the controls in the form (use empty strings)\n  const [formObject, setFormObject] = useState({ title: '', author: '', synopsis: '' })\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadReviews()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadReviews() {\n    APIReviews.getReviews()\n      .then(res =>\n        setReviews(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  function handleInputChange(event) {\n    // add code to control the components here\n    const { name, value } = event.target\n    setFormObject({\n      ...formObject, [name]: value\n    })\n  }\n\n  function handleFormSubmit(event) {\n    // add code here to post a new book to the api\n    event.preventDefault();\n    if (formObject.title && formObject.author) {\n      APIReviews.saveReview({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synosis\n\n      })\n        .then(() =>\n          setFormObject({\n            title: '',\n            author: '',\n            synopsis: ''\n          })\n        )\n        .then(() =>\n          loadReviews()\n        )\n        .catch((err) =>\n          console.log(err)\n        )\n\n    }\n\n  }\n\n\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-6\">\n         \n            <h5>Write a review about a Vendor or anything!</h5>\n          <form>\n            {/* inputs should be updated to be controlled inputs */}\n            <Input\n              onChange={handleInputChange}\n              name=\"author\"\n              placeholder=\"Business (required)\"\n              value={formObject.author}\n            />\n            <TextArea\n              onChange={handleInputChange}\n              name=\"title\"\n              placeholder=\"Review (required)\"\n              value={formObject.title}\n            />\n        \n            <FormBtn\n              disabled={!(formObject.author && formObject.title)}\n              onClick={handleFormSubmit}\n            >\n              Submit Review\n              </FormBtn>\n          </form>\n        </Col>\n        <Col size=\"md-6 sm-12\">\n          \n            <h5>Latest reviews:</h5>\n         \n          {reviews.length ? (\n                <List>\n                {reviews.map(review => {\n                    return (\n                        <ListItem key={review._id}>\n  \n                                <strong>\n                                    {review.author}: {review.title}\n                                </strong>\n                     \n                        </ListItem>\n                    );\n                })}\n            </List>\n          ) : (\n              <h6>Be the first to write a review.</h6>\n            )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}