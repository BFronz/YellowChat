{"ast":null,"code":"import axios from \"axios\"; // import setAuthToken from \"../utils/setAuthToken\";\n// import jwt_decode from \"jwt-decode\";\n\nimport { returnErrors } from \"./errorAction\";\nimport { USER_LOADING, USER_LOADED, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, AUTH_ERROR } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(_ref) {\n  var company = _ref.company,\n      name = _ref.name,\n      username = _ref.username,\n      email = _ref.email,\n      password = _ref.password,\n      usertype = _ref.usertype,\n      categories = _ref.categories,\n      street = _ref.street,\n      city = _ref.city,\n      state = _ref.state,\n      zip = _ref.zip,\n      phone = _ref.phone,\n      website = _ref.website;\n  return function (dispatch) {\n    // headers\n    var config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }; // request body\n\n    var body = JSON.stringify({\n      company: company,\n      name: name,\n      username: username,\n      email: email,\n      password: password,\n      usertype: usertype,\n      categories: categories,\n      street: street,\n      city: city,\n      state: state,\n      zip: zip,\n      phone: phone,\n      website: website\n    });\n    axios.post(\"/api/register\", body, config).then(function (res) {\n      return dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }) // catch registration errors\n    .catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(_ref2) {\n  var email = _ref2.email,\n      password = _ref2.password;\n  return function (dispatch) {\n    // headers\n    var config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }; // request body\n\n    var body = JSON.stringify({\n      email: email,\n      password: password\n    });\n    axios.post(\"/api/login\", body, config).then(function (res) {\n      return dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }) // catch registration errors\n    .catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n}; // Set up config headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // get token from local storage\n  var token = getState().auth.token; // headers\n\n  var config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token is present, reconfig headers to token\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return function (dispatch, getState) {\n    // this is what happens when user loading\n    dispatch({\n      type: USER_LOADING\n    });\n    axios.get(\"/user/login\", tokenConfig(getState)).then(function (res) {\n      return dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }) // catch registration errors\n    .catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    return {\n      type: LOGOUT_SUCCESS\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/zcool/Desktop/yellow-chat/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","AUTH_ERROR","registerUser","company","name","username","email","password","usertype","categories","street","city","state","zip","phone","website","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","loginUser","tokenConfig","getState","token","auth","setUserLoading","get","logoutUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAAQC,YAAR,QAA2B,eAA3B;AAGA,SACEC,YADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,cAPF,EAQEC,UARF,QASO,SATP,C,CAWA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAEC,OAAF,QAAEA,OAAF;AAAA,MAAWC,IAAX,QAAWA,IAAX;AAAA,MAAiBC,QAAjB,QAAiBA,QAAjB;AAAA,MAA2BC,KAA3B,QAA2BA,KAA3B;AAAA,MAAkCC,QAAlC,QAAkCA,QAAlC;AAAA,MAA4CC,QAA5C,QAA4CA,QAA5C;AAAA,MAAsDC,UAAtD,QAAsDA,UAAtD;AAAA,MAAkEC,MAAlE,QAAkEA,MAAlE;AAAA,MAA0EC,IAA1E,QAA0EA,IAA1E;AAAA,MAAgFC,KAAhF,QAAgFA,KAAhF;AAAA,MAAuFC,GAAvF,QAAuFA,GAAvF;AAAA,MAA4FC,KAA5F,QAA4FA,KAA5F;AAAA,MAAmGC,OAAnG,QAAmGA,OAAnG;AAAA,SAAgH,UAAAC,QAAQ,EAAI;AACtJ;AACA,QAAMC,MAAM,GAAE;AACZC,MAAAA,OAAO,EACP;AAAC,wBAAgB;AAAjB;AAFY,KAAd,CAFsJ,CAMtJ;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AAAClB,MAAAA,OAAO,EAAPA,OAAD;AAAUC,MAAAA,IAAI,EAAJA,IAAV;AAAgBC,MAAAA,QAAQ,EAARA,QAAhB;AAA0BC,MAAAA,KAAK,EAALA,KAA1B;AAAiCC,MAAAA,QAAQ,EAARA,QAAjC;AAA2CC,MAAAA,QAAQ,EAARA,QAA3C;AAAqDC,MAAAA,UAAU,EAAVA,UAArD;AAAiEC,MAAAA,MAAM,EAANA,MAAjE;AAAyEC,MAAAA,IAAI,EAAJA,IAAzE;AAA+EC,MAAAA,KAAK,EAALA,KAA/E;AAAsFC,MAAAA,GAAG,EAAHA,GAAtF;AAA2FC,MAAAA,KAAK,EAALA,KAA3F;AAAkGC,MAAAA,OAAO,EAAPA;AAAlG,KAAf,CAAZ;AACAvB,IAAAA,KAAK,CACF8B,IADH,CACQ,eADR,EACyBH,IADzB,EAC+BF,MAD/B,EAEGM,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAAC;AACpBS,QAAAA,IAAI,EAAE7B,gBADc;AAEpB8B,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFO,OAAD,CAAZ;AAAA,KAFX,EAME;AANF,KAOGC,KAPH,CAOS,UAAAC,GAAG,EAAI;AACZb,MAAAA,QAAQ,CAACvB,YAAY,CAACoC,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAf,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAE5B;AADC,OAAD,CAAR;AAGD,KAZH;AAaC,GArByB;AAAA,CAArB,C,CAuBP;;AACA,OAAO,IAAMmC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAE1B,KAAF,SAAEA,KAAF;AAAA,MAASC,QAAT,SAASA,QAAT;AAAA,SAAuB,UAAAS,QAAQ,EAAI;AAC1D;AACA,QAAMC,MAAM,GAAE;AACZC,MAAAA,OAAO,EACP;AAAC,wBAAgB;AAAjB;AAFY,KAAd,CAF0D,CAM1D;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AAACf,MAAAA,KAAK,EAALA,KAAD;AAAQC,MAAAA,QAAQ,EAARA;AAAR,KAAf,CAAZ;AACAf,IAAAA,KAAK,CACF8B,IADH,CACQ,YADR,EACsBH,IADtB,EAC4BF,MAD5B,EAEGM,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAAC;AACpBS,QAAAA,IAAI,EAAE3B,aADc;AAEpB4B,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFO,OAAD,CAAZ;AAAA,KAFX,EAME;AANF,KAOGC,KAPH,CAOS,UAAAC,GAAG,EAAI;AACZb,MAAAA,QAAQ,CAACvB,YAAY,CAACoC,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,YAAzC,CAAb,CAAR;AACAf,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAE1B;AADC,OAAD,CAAR;AAGD,KAZH;AAaC,GArBsB;AAAA,CAAlB,C,CAuBP;;AACA,OAAO,IAAMkC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AACvC;AACA,MAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B,CAFuC,CAGvC;;AACA,MAAMlB,MAAM,GAAE;AACZC,IAAAA,OAAO,EACP;AAAC,sBAAgB;AAAjB;AAFY,GAAd,CAJuC,CAQvC;;AACA,MAAIiB,KAAJ,EAAW;AACTlB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCiB,KAAjC;AACD;;AACD,SAAOlB,MAAP;AACD,CAbM,C,CAgBP;;AACA,OAAO,IAAMoB,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAM,UAACrB,QAAD,EAAWkB,QAAX,EAAwB;AAC1D;AACAlB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAE/B;AADC,KAAD,CAAR;AAGAF,IAAAA,KAAK,CACJ8C,GADD,CACK,aADL,EACoBL,WAAW,CAACC,QAAD,CAD/B,EAECX,IAFD,CAEM,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAAC;AACpBS,QAAAA,IAAI,EAAE9B,WADc;AAEpB+B,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFO,OAAD,CAAZ;AAAA,KAFT,EAMA;AANA,KAOCC,KAPD,CAOO,UAAAC,GAAG,EAAI;AACZb,MAAAA,QAAQ,CAACvB,YAAY,CAACoC,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAf,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAExB;AADC,OAAD,CAAR;AAGD,KAZD;AAaD,GAlB6B;AAAA,CAAvB,C,CAoBP;;AACA,OAAO,IAAMsC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAvB,QAAQ,EAAI;AAC1C,WAAO;AACLS,MAAAA,IAAI,EAAEzB;AADD,KAAP;AAGD,GAJyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\r\n// import setAuthToken from \"../utils/setAuthToken\";\r\n// import jwt_decode from \"jwt-decode\";\r\nimport {returnErrors} from \"./errorAction\";\r\n\r\n\r\nimport {\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  AUTH_ERROR\r\n} from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = ({company, name, username, email, password, usertype, categories, street, city, state, zip, phone, website}) => dispatch => {\r\n  // headers\r\n  const config= {\r\n    headers: \r\n    {\"Content-type\": \"application/json\"}\r\n  }\r\n  // request body\r\n  const body= JSON.stringify({company, name, username, email, password, usertype, categories, street, city, state, zip, phone, website});\r\n  axios\r\n    .post(\"/api/register\", body, config)\r\n    .then(res => dispatch({\r\n      type: REGISTER_SUCCESS, \r\n      payload: res.data\r\n    })) \r\n    // catch registration errors\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      })\r\n    });\r\n  };\r\n\r\n// Login - get user token\r\nexport const loginUser = ({email, password}) => dispatch => {\r\n  // headers\r\n  const config= {\r\n    headers: \r\n    {\"Content-type\": \"application/json\"}\r\n  }\r\n  // request body\r\n  const body= JSON.stringify({email, password});\r\n  axios\r\n    .post(\"/api/login\", body, config)\r\n    .then(res => dispatch({\r\n      type: LOGIN_SUCCESS, \r\n      payload: res.data\r\n    })) \r\n    // catch registration errors\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      })\r\n    });\r\n  };\r\n\r\n// Set up config headers and token\r\nexport const tokenConfig = (getState) => {\r\n  // get token from local storage\r\n  const token = getState().auth.token;\r\n  // headers\r\n  const config= {\r\n    headers: \r\n    {\"Content-type\": \"application/json\"}\r\n  };\r\n  // if token is present, reconfig headers to token\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n}\r\n\r\n\r\n// User loading\r\nexport const setUserLoading = () => (dispatch, getState) => {\r\n  // this is what happens when user loading\r\n  dispatch({\r\n    type: USER_LOADING\r\n  });\r\n  axios\r\n  .get(\"/user/login\", tokenConfig(getState))\r\n  .then(res => dispatch({\r\n    type: USER_LOADED, \r\n    payload: res.data\r\n  })) \r\n  // catch registration errors\r\n  .catch(err => {\r\n    dispatch(returnErrors(err.response.data, err.response.status));\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    })\r\n  });\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}